
name: Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - '.editorconfig'
  workflow_dispatch:
    inputs:
      version_increment:
        description: 'Version increment type (major, minor, patch)'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - major
          - minor
          - patch

jobs:
  calculate-version:
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.semver.outputs.version_tag }}
      version: ${{ steps.semver.outputs.version }}
      version_code: ${{ steps.version_code.outputs.code }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for semantic-version to analyze history
          
      - name: Calculate next semantic version
        id: semver
        uses: paulhatch/semantic-version@v5.4.0
        with:
          version_format: '{{major}}.{{minor}}.{{patch}}'
          tag_prefix: 'v'
          major_pattern: "(BREAKING CHANGE:|feat!:)"
          minor_pattern: "feat:"
          patch_pattern: "fix:"
          increment_override: ${{ github.event.inputs.version_increment != 'auto' && github.event.inputs.version_increment || '' }}
          
      - name: Calculate Android version code
        id: version_code
        run: |
          # Extract major, minor, patch from version
          IFS='.' read -r major minor patch <<< "${{ steps.semver.outputs.version }}"
          # Calculate version code: major * 10000 + minor * 100 + patch
          version_code=$((major * 10000 + minor * 100 + patch))
          echo "code=$version_code" >> $GITHUB_OUTPUT

  android-build-and-publish:
    needs: calculate-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Update version in build.gradle
        run: |
          # Update both versionCode and versionName
          sed -i "/versionCode = / c\        versionCode = ${{ needs.calculate-version.outputs.version_code }}" app/build.gradle.kts
          sed -i "/versionName = / c\        versionName = \"${{ needs.calculate-version.outputs.version }}\"" app/build.gradle.kts

      - name: Check for signing keystore secret
        id: check_keystore_secret
        run: |
          if [ -n "${{ secrets.SIGNING_KEY_STORE_BASE64 }}" ]; then
            echo "DECODE_KEYSTORE_ENABLED=true" >> $GITHUB_ENV
          else
            echo "DECODE_KEYSTORE_ENABLED=false" >> $GITHUB_ENV
          fi

      - name: Decode the keystore
        if: ${{ env.DECODE_KEYSTORE_ENABLED == 'true' }}
        run: |
          echo "${{ secrets.SIGNING_KEY_STORE_BASE64 }}" | base64 --decode > app/keystore.jks
          echo "STORE_PASSWORD=${{ secrets.SIGNING_STORE_PASSWORD }}" >> gradle.properties
          echo "KEY_PASSWORD=${{ secrets.SIGNING_KEY_PASSWORD }}" >> gradle.properties
          echo "KEY_ALIAS=${{ secrets.SIGNING_KEY_ALIAS }}" >> gradle.properties

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build release APK
        run: ./gradlew assembleRelease

      - name: Sign the APK
        if: ${{ env.DECODE_KEYSTORE_ENABLED == 'true' }}
        run: |
          jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore app/keystore.jks -storepass ${{ secrets.SIGNING_STORE_PASSWORD }} -keypass ${{ secrets.SIGNING_KEY_PASSWORD }} app/build/outputs/apk/release/app-release-unsigned.apk ${{ secrets.SIGNING_KEY_ALIAS }}
          zipalign -v 4 app/build/outputs/apk/release/app-release-unsigned.apk app/build/outputs/apk/release/app-release-signed.apk

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-signed-apk
          path: app/build/outputs/apk/release/app-release-signed.apk

  create-release:
    needs: [calculate-version, android-build-and-publish]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: app-release-signed-apk

      - name: Generate Release Notes
        id: release_notes
        run: |
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "## What's New" >> $GITHUB_ENV
          echo "This is version ${{ needs.calculate-version.outputs.version }} (build ${{ needs.calculate-version.outputs.version_code }})" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "### Changes" >> $GITHUB_ENV
          git log $(git describe --tags --abbrev=0 2>/dev/null || echo HEAD^)..HEAD --pretty=format:"- %s" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v2.0.4
        with:
          tag_name: ${{ needs.calculate-version.outputs.version_tag }}
          name: Release ${{ needs.calculate-version.outputs.version_tag }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false
          files: app-release-signed-apk/app-release-signed.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
