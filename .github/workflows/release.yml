name: Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - '.editorconfig'
  workflow_dispatch:
    inputs:
      version_increment:
        description: 'Version increment type (major, minor, patch)'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - major
          - minor
          - patch

jobs:
  calculate-version:
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.set_versions.outputs.version_tag }}
      version: ${{ steps.set_versions.outputs.version }}
      version_code: ${{ steps.set_versions.outputs.version_code }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for semantic-version to analyze history

      - name: Calculate next semantic version
        id: semver
        uses: paulhatch/semantic-version@v5.4.0
        with:
          version_format: '{{major}}.{{minor}}.{{patch}}'
          tag_prefix: 'v'
          major_pattern: "BREAKING CHANGE:"
          minor_pattern: "feat:"
          search_commit_body: true

      - name: Debug Semantic Version Output (Raw)
        run: |
          echo "Raw Semantic Version Output - Version: ${{ steps.semver.outputs.version }}"
          echo "Raw Semantic Version Output - Version Tag: ${{ steps.semver.outputs.version_tag }}"

      - name: Set Final Version Outputs
        id: set_versions
        run: |
          RAW_VERSION="${{ steps.semver.outputs.version }}"
          RAW_VERSION_TAG="${{ steps.semver.outputs.version_tag }}"

          ACTUAL_VERSION=""
          ACTUAL_VERSION_TAG=""

          # Check if semantic version action output contains placeholders, if so, fallback
          if [[ "$RAW_VERSION" == *"{{major}}"* ]]; then
            echo "Semantic version output contains placeholders. Falling back to 0.1.0."
            ACTUAL_VERSION="0.1.0"
            ACTUAL_VERSION_TAG="v0.1.0"
          else
            ACTUAL_VERSION="$RAW_VERSION"
            ACTUAL_VERSION_TAG="$RAW_VERSION_TAG"
          fi

          # Extract major, minor, patch from the actual version
          IFS='.' read -r major minor patch <<< "$ACTUAL_VERSION"
          # Calculate version code: major * 10000 + minor * 100 + patch
          version_code=$((major * 10000 + minor * 100 + patch))
          
          echo "Final Determined Version: $ACTUAL_VERSION"
          echo "Final Determined Version Tag: $ACTUAL_VERSION_TAG"
          echo "Calculated Version Code: $version_code"

          # Set job outputs for consumption by other jobs
          echo "version=$ACTUAL_VERSION" >> $GITHUB_OUTPUT
          echo "version_tag=$ACTUAL_VERSION_TAG" >> $GITHUB_OUTPUT
          echo "version_code=$version_code" >> $GITHUB_OUTPUT

  android-build-and-publish:
    needs: calculate-version
    runs-on: ubuntu-latest
    env: # Set environment variables for version and version code
      VERSION_NAME_ENV: ${{ needs.calculate-version.outputs.version }}
      VERSION_CODE_ENV: ${{ needs.calculate-version.outputs.version_code }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Check for signing keystore secret
        id: check_keystore_secret
        run: |
          if [ -n "${{ secrets.SIGNING_KEY_STORE_BASE64 }}" ]; then
            echo "DECODE_KEYSTORE_ENABLED=true" >> $GITHUB_ENV
          else
            echo "DECODE_KEYSTORE_ENABLED=false" >> $GITHUB_ENV
          fi

      - name: Decode the keystore
        if: ${{ env.DECODE_KEYSTORE_ENABLED == 'true' }}
        run: |
          echo "${{ secrets.SIGNING_KEY_STORE_BASE64 }}" | base64 --decode > app/keystore.jks
          echo "STORE_PASSWORD=${{ secrets.SIGNING_STORE_PASSWORD }}" >> gradle.properties
          echo "KEY_PASSWORD=${{ secrets.SIGNING_KEY_PASSWORD }}" >> gradle.properties
          echo "KEY_ALIAS=${{ secrets.SIGNING_KEY_ALIAS }}" >> gradle.properties

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build release APK
        run: ./gradlew assembleRelease -PVERSION_NAME=$VERSION_NAME_ENV -PVERSION_CODE=$VERSION_CODE_ENV

      - name: Process APK (Sign and/or Zipalign)
        run: |
          UNSIGNED_APK_PATH="app/build/outputs/apk/release/app-release-unsigned.apk"
          FINAL_APK_PATH="app/build/outputs/apk/release/app-release-final.apk"

          if [[ "${{ env.DECODE_KEYSTORE_ENABLED }}" == "true" ]]; then
            echo "Signing APK..."
            jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore app/keystore.jks -storepass "${{ secrets.SIGNING_STORE_PASSWORD }}" -keypass "${{ secrets.SIGNING_KEY_PASSWORD }}" "$UNSIGNED_APK_PATH" "${{ secrets.SIGNING_KEY_ALIAS }}"
          
            echo "Zipaligning signed APK..."
            zipalign -v 4 "$UNSIGNED_APK_PATH" "$FINAL_APK_PATH"
            echo "Signed and zipaligned APK created at $FINAL_APK_PATH"
          else
            echo "Signing secrets not provided. Using unsigned APK."
            if [ -f "$UNSIGNED_APK_PATH" ]; then
              echo "Zipaligning unsigned APK..."
              zipalign -v 4 "$UNSIGNED_APK_PATH" "$FINAL_APK_PATH"
              echo "Unsigned and zipaligned APK created at $FINAL_APK_PATH"
            else
              echo "Error: Unsigned APK not found at $UNSIGNED_APK_PATH after build."
              exit 1 # Fail the step if build artifact is missing
            fi
          fi

      - name: Upload Final APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk # Consistent artifact name
          path: app/build/outputs/apk/release/app-release-final.apk
          if-no-files-found: error # Ensure pipeline fails if no APK is produced

  create-release:
    needs: [calculate-version, android-build-and-publish]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: app-release-apk # Download the consistently named artifact

      - name: Generate Release Notes
        id: release_notes
        run: |
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "## What's New" >> $GITHUB_ENV
          echo "This is version ${{ needs.calculate-version.outputs.version }} (build ${{ needs.calculate-version.outputs.version_code }})" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "### Changes" >> $GITHUB_ENV
          git log $(git describe --tags --abbrev=0 2>/dev/null || echo HEAD^)..HEAD --pretty=format:"- %s" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v2.0.4
        with:
          tag_name: ${{ needs.calculate-version.outputs.version_tag }}
          name: Release ${{ needs.calculate-version.outputs.version_tag }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false
          files: app-release-apk/app-release-final.apk # Attach the consistently named APK
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}